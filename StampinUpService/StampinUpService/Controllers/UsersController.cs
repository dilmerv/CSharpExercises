using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.AspNetCore.Mvc;
using StampinUp.Service.Models;

namespace StampinUp.Service.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class UsersController : ControllerBase
    {        
        private readonly List<User> _users = new List<User>();

        public UsersController()
        {
            _users.Add(new User(
                Guid.NewGuid(),
                "supergrover@sesamestreet.com",
                "Super Grover",
                "Crashland",
                "Up Up and Away!",
                new List<UserPlatform>()
                {
                    new UserPlatform(1,"VR Platform",new DateTime(2022, 1, 1, 0, 0, 0)),
                    new UserPlatform(2,"PS5 Platform",new DateTime(2020, 11, 12, 0, 0, 0))
                })
            );

            _users.Add(new User(
                Guid.NewGuid(),
                "oscarthegrouch@sesamestreet.com",
                "Oscar The Grouch",
                "Garbagecanbul",
                "Scram! Get Lost!",
                new List<UserPlatform>())
            );

            _users.Add(new User(
                new Guid("0ba44840-524e-4013-beb0-6340461dcba3"), //Hard code guid for testing GetById,Put,Patch
                "cookiemonster@sesamestreet.com",
                "Cookie Monster",
                "Isle of Cookie",
                "num num num num",
                new List<UserPlatform>()
                {
                    new UserPlatform(1,"Xbox Series S Platform",new DateTime(2020, 11, 10, 0, 0, 0))
                })
            );
        }

        [HttpGet]
        public ActionResult<List<User>> Get()
        {
            return _users;
        }

        [HttpGet("{id:Guid}")]
        public ActionResult<User> GetById(Guid id)
        {
            return Ok(_users.FirstOrDefault(u => u.Id == id));
        }

        [HttpGet("{email}")]
        public ActionResult<User> GetByEmail(string email)
        {
            return Ok(_users.FirstOrDefault(u => u.Email == email));
        }

        [HttpPost]
        public ActionResult<User> Insert([FromBody] User user)
        {
            user.Id = Guid.NewGuid(); //Typically this would be generated by DB
            _users.Add(user);
            return user;
        }

        [HttpPut]
        public ActionResult<User> Replace(Guid id, [FromBody] User user)
        {
            User oldUser = _users.FirstOrDefault(u => u.Id == id);
            if (oldUser == null) return NotFound();
            oldUser = user;
            return _users.FirstOrDefault(u => u.Id == id);
        }

        [HttpPatch]
        public ActionResult<User> Update(Guid id, [FromBody] User user)
        {
            User oldUser = _users.FirstOrDefault(u => u.Id == id);
            if (oldUser == null) return NotFound();
            /* A true PATCH call is outside the scope of this practice API, but if
               we were to do it, then we would parse the JSON object
               to know which properties need to be updated; (via JToken or thirdparty
               JSON patch modeler, etc.)                             
             */
            oldUser.Name = user.Name; //Just for an example of a PATCH endpoint we'll assume the request contained just the Name property (See comment above)
            return _users.FirstOrDefault(u => u.Id == id);
        }
    }
}
